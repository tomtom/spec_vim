*spec.txt*          Behaviour-driven design (BDD) for vim scripts
                    Author: Tom Link, micathom at gmail com

This plugin provides a small set of commands to facilitate 
behaviour-driven design of vim plugins. It basically consists of two 
parts:

    spec   ... BDD-related commands
    should ... Convenience functions for testing

According to BDD theory, you are supposed to write a specification first 
and then make the code fulfill that specification. If you don't believe 
in BDD, you could also think of spec.vim as a more convenient approach 
to unit testing.

A example specification could look like this: >

    SpecBegin 'title': 'Foo', 'sfile': 'autoload/foo.vim'

    It should add numbers.
    Should be equal foo#Add(1, 2), 3
    
    It should not add values of other types.
    Should throw something 'foo#Add("1", 2)'

Spec knows how to rewrite certain rules in order to turn them into 
proper function call. Compare the following rules: >

    Should should#throw#Something('foo#Add([1], 2)')
    Should throw#Something('foo#Add([1], 2)')
    Should throw something('foo#Add({1:2}, 2)')
    Should throw something 'foo#Add({1:2}, 2)'

    Should !should#be#Equal(foo#Add(1, 2), 3)
    Should not be equal foo#Add(1, 2), 4

Specification scripts basically are normal vim scripts but must be run 
by the |:Spec| command. The |:SpecBegin| command also allows to define 
options sets against which the specification will be tested.

For an example specification see: ../spec/spec/spec.vim

CAVEAT: Please read at least the comments on |:Spec| and |:SpecBegin|.


-----------------------------------------------------------------------
Install~

Edit the vba file and type: >

    :so %

See :help vimball for details. If you have difficulties or use vim 7.0, 
please make sure, you have the current version of vimball
(vimscript #1502) installed or update your runtime.

Some "should"-functions require tlib (vimscript #1863) to be installed.


========================================================================
Contents~

        g:spec_cwindow ........................... |g:spec_cwindow|
        g:spec_option_sets ....................... |g:spec_option_sets|
        :Spec .................................... |:Spec|
        :SpecBegin ............................... |:SpecBegin|
        SpecInit ................................. |SpecInit()|
        :SpecInclude ............................. |:SpecInclude|
        :It ...................................... |:It|
        :Should .................................. |:Should|
        :Replay .................................. |:Replay|
        spec#RewriteRule ......................... |spec#RewriteRule()|
        spec#Include ............................. |spec#Include()|
        spec#Val ................................. |spec#Val()|
        spec#OpenScratch ......................... |spec#OpenScratch()|
        spec#CloseScratch ........................ |spec#CloseScratch()|
        spec#Feedkeys ............................ |spec#Feedkeys()|
        spec#Replay .............................. |spec#Replay()|
        spec#speckiller#Reset .................... |spec#speckiller#Reset()|
        spec#speckiller#OptionSets ............... |spec#speckiller#OptionSets()|
        should#be#Type ........................... |should#be#Type()|
        should#be#Number ......................... |should#be#Number()|
        should#be#String ......................... |should#be#String()|
        should#be#Funcref ........................ |should#be#Funcref()|
        should#be#List ........................... |should#be#List()|
        should#be#Dictionary ..................... |should#be#Dictionary()|
        should#be#Equal .......................... |should#be#Equal()|
        should#be#Unequal ........................ |should#be#Unequal()|
        should#be#Greater ........................ |should#be#Greater()|
        should#be#GreaterEqual ................... |should#be#GreaterEqual()|
        should#be#Less ........................... |should#be#Less()|
        should#be#LessEqual ...................... |should#be#LessEqual()|
        should#be#Empty .......................... |should#be#Empty()|
        should#be#NotEmpty ....................... |should#be#NotEmpty()|
        should#be#Match .......................... |should#be#Match()|
        should#be#NotMatch ....................... |should#be#NotMatch()|
        should#be#Existent ....................... |should#be#Existent()|
        should#be#Like ........................... |should#be#Like()|
        should#be#Unlike ......................... |should#be#Unlike()|
        should#finish#InSecs ..................... |should#finish#InSecs()|
        should#finish#InMicroSecs ................ |should#finish#InMicroSecs()|
        should#maintain#WindowLayout ............. |should#maintain#WindowLayout()|
        should#test#Init ......................... |should#test#Init()|
        should#throw#Something ................... |should#throw#Something()|
        should#throw#Exception ................... |should#throw#Exception()|
        should#yield#Buffer ...................... |should#yield#Buffer()|
        should#yield#SqueezedBuffer .............. |should#yield#SqueezedBuffer()|


========================================================================
plugin/spec.vim~

                                                    *g:spec_cwindow*
g:spec_cwindow                 (default: 'cwindow')
    The command that should be used for viewing the quickfix list.

                                                    *g:spec_option_sets*
g:spec_option_sets             (default: [])
    If |g:spec_killer| is non-null, test your specs against these 
    options -- a list of dictionaries.
    
    See also |:SpecBegin|.

                                                    *:Spec*
Spec[!] [PATH]
    Run one or more specification files.
    
    PATH can be either a file or a directory.
    
    If PATH is a directory, run all vim files (whose name doesn't begin 
    with an underscore "_") under PATH as specification scripts.
    
    If no PATH is given, run the current file only.
    
    With [!], also print a short list specifications by means of |:TLog|, 
    if available, or |:echom|. You might need to call |:messages| in order 
    to review this list.
    
    NOTES:
    Unit test scripts must not run other unit tests by using 
    |:source|. Use |:SpecInclude| if you have to include a vimscript file 
    that contains |:Should| commands.
    
    Even then it sometimes happens that spec cannot distinguish 
    between to identical tests in different contexts, which is why you 
    should only use one |:SpecBegin| command per file.

                                                    *:SpecBegin*
SpecBegin [ARGUMENTS AS INNER DICTIONNARY]
    Establish the environment for the current specification.
    This command also serves as a saveguard that should prevent users from 
    running specs with the |:source| command.
    
    Known keys for ARGUMENTS:
    
      title   ... The test's title.
      file    ... The script context.
      before  ... Code to be run before each test (only effective when run 
                  via |:SpecRun|.
      after   ... Code to be run after each test (only effective when run 
                  via |:SpecRun|.
      scratch ... Run spec in scratch buffer. If the value is "", use an 
                  empty buffer. If it is "%", read the spec file itself 
                  into the scratch buffer. Otherwise read the file of the 
                  given name.
      cleanup ... A list of function names that will be removed
      options ... Run the spec against these options (a list of 
                  dictionnaries or 'vim' for the default option set).
                  NOTE: If you test your specs against vim default 
                  settings, it's possible that you have to restart vim in 
                  order to get the usual environment.
    
    NOTES:
    Any global variables that were not defined at the time of the last 
    invocation of |:SpecBegin| are considered temporary variables and will 
    be removed.
    
    A specification file *should* ;-) include exactly one :SpecBegin 
    command.

                                                    *SpecInit()*
SpecInit()
    Include the line "exec SpecInit()" in your script in order to install 
    the function s:SpecVal(), which can be used to evaluate expressions in 
    script context. This initializations is necessary only if you call the 
    function |spec#Val()| in your tests.


========================================================================
macros/spec.vim~

                                                    *:SpecInclude*
SpecInclude _FILENAME
    Include a spec file. The filename of the included type should begin 
    with an underscore and it should not contain a |:SpecBegin| command.

                                                    *:It*
It[!] MESSAGE
    Insert a message.
    The message will be displayed when running the spec in verbose mode. 
    With [!], the message will be included in the quickfix list to mark a 
    pending specification.

                                                    *:Should*
Should {expr}
    Make sure that the value of an expression is not |empty()|. If used 
    after a |:SpecBegin| command, any occurrences of "<SID>" in the 
    expression is replaced with the current script's |<SNR>|.

                                                    *:Replay*
Replay[!] MACRO
    Replay a recorded key sequence.
    With [!], the argument is passed unprocessed on to |spec#Replay()|. 
    Otherwise, the macro is evaluated as in |expr-quote|.


========================================================================
autoload/spec.vim~

                                                    *spec#RewriteRule()*
spec#RewriteRule(rx, subst)
    Define your own rewrite rules.
    
    Care must be taken so that the rule expands to a single atomic 
    statement. The pattern should always match from the beginning of the 
    string.
    
    Example: The following rule is wrong: >
    
      \(\d\+\) be equal to \(\d\+\).* => \1 == \2
    
<   because it doesn't match from the beginning of the string and because 
    the substiution breaks other rules like "not => !". The following is 
    preferable: >
    
      ^!\?\zs\(\d\+\) be equal to \(\d\+\).* => (\1 == \2)
    
<   This pattern expands the pattern only when found in the right position 
    and the substiution can be prefixed with !.
    
    You could then write: >
    
      Should 1 be equal to 1
      Should not 1 be equal to 2
<

                                                    *spec#Include()*
spec#Include(filename, top_spec)

                                                    *spec#Val()*
spec#Val(expr)
    Evaluate an expression in the context of a script.
    Requires a call to |specInit()|.

                                                    *spec#OpenScratch()*
spec#ScratchBuffer(?filename="", ?filetype="") "{{{3
    Open the spec scratch buffer.

                                                    *spec#CloseScratch()*
spec#CloseScratch()
    Close the scratch buffer. (Requires the cursor to be located in the spec 
    scratch buffer.)

                                                    *spec#Feedkeys()*
spec#Feedkeys(sequence)

                                                    *spec#Replay()*
spec#Replay(macro)
    Replay a recorded macro.


========================================================================
autoload/spec/speckiller.vim~

                                                    *spec#speckiller#Reset()*
spec#speckiller#Reset()

                                                    *spec#speckiller#OptionSets()*
spec#speckiller#OptionSets(options, i)
    Return the i'th option set.


========================================================================
autoload/should/be.vim~


should#be#A(expr, type)
    Test if expr is of type, where type can be:
    
        - One of: 'number', 'string', 'funcref', 'list', 'dictionary'
        - A list of above type names (one of which must match)
        - A dictionary in which case the type is evaluated as object 
          template. Keys in the template that do not have a value of 0, 
          must exist in the object/expression.
    
    See also |type()|.

                                                    *should#be#Type()*
should#be#Type(expr, type)
    Faster checks than version above but without descriptive messages and 
    type must be a string.

                                                    *should#be#Number()*
should#be#Number(expr)

                                                    *should#be#String()*
should#be#String(expr)

                                                    *should#be#Funcref()*
should#be#Funcref(expr)

                                                    *should#be#List()*
should#be#List(expr)

                                                    *should#be#Dictionary()*
should#be#Dictionary(expr)

                                                    *should#be#Equal()*
should#be#Equal(expr, expected)

                                                    *should#be#Unequal()*
should#be#Unequal(expr, expected)

                                                    *should#be#Greater()*
should#be#Greater(a, b)

                                                    *should#be#GreaterEqual()*
should#be#GreaterEqual(a, b)

                                                    *should#be#Less()*
should#be#Less(a, b)

                                                    *should#be#LessEqual()*
should#be#LessEqual(a, b)

                                                    *should#be#Empty()*
should#be#Empty(expr)

                                                    *should#be#NotEmpty()*
should#be#NotEmpty(expr)

                                                    *should#be#Match()*
should#be#Match(expr, expected)

                                                    *should#be#NotMatch()*
should#be#NotMatch(expr, expected)

                                                    *should#be#Existent()*
should#be#Existent(expr)

                                                    *should#be#Like()*
should#be#Like(string, rx, ?case='')
    Case can be "#" or "?".

                                                    *should#be#Unlike()*
should#be#Unlike(string, rx, ?case='')
    Case can be "#" or "?".


========================================================================
autoload/should/finish.vim~

                                                    *should#finish#InSecs()*
should#finish#InSecs(expr, secs)

                                                    *should#finish#InMicroSecs()*
should#finish#InMicroSecs(expr, msecs)


========================================================================
autoload/should/maintain.vim~

                                                    *should#maintain#WindowLayout()*
should#maintain#WindowLayout(layout)
    Require tlib.


========================================================================
autoload/should/test.vim~

                                                    *should#test#Init()*
should#test#Init()


========================================================================
autoload/should/throw.vim~

                                                    *should#throw#Something()*
should#throw#Something(expr)
    Return the exception when evaluating expr or an empty string if 
    nothing was thrown.

                                                    *should#throw#Exception()*
should#throw#Exception(expr, expected)
    Check if the exception throws when evaluating expr matches the 
    expected |regexp|.


========================================================================
autoload/should/yield.vim~

                                                    *should#yield#Buffer()*
should#yield#Buffer(expr, filename)
    Compare the current buffer with the contents of filename after 
    |:exe|cuting expr.
    Useful for testing normal commands, mappings etc.

                                                    *should#yield#SqueezedBuffer()*
should#yield#SqueezedBuffer(expr, filename)
    Compare the current buffer with the contents of filename after 
    |:exe|cuting expr but ignore changes in whitespace.



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
